[package]
name = "l3chat"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[[bin]]
name = "l3chat"
path = "src/main.rs"

[[bin]]
name = "hash_password"
path = "src/bin/hash_password.rs"

[dependencies]
anyhow = "1.0"
async-openai = { version = "0.28.2", optional = true }
argon2 = { version = "0.5.3", optional = true }
axum = { version = "0.8.0", features = ["macros", "ws"], optional = true }
axum-extra = { version = "0.10.1", features = ["cookie"], optional = true }
base64 = { version = "0.22.1", optional = true }
candle-core = { version = "0.8.3", optional = true }
candle-nn = { version = "0.8.3", optional = true }
cfg-if = "1.0.0"
chrono = { version = "0.4", optional = false, features = ["serde"] }
console_error_panic_hook = { version = "0.1", optional = true }
cookie = { version = "0.18.1", optional = true }
dashmap = { version = "6.1.0", optional = true }
deadpool-diesel = { version = "0.6.1", optional = true, features = ["postgres", "rt_tokio_1"] }
diesel = { version = "2.2.10", optional = true, features = ["chrono", "serde_json"] }
diesel-async = { version = "0.5.2", optional = true, features = ["postgres", "pool", "deadpool"] }
dotenv = { version = "0.15.0", optional = false }
env_logger = { version = "0.9", optional = false }
futures = { version = "0.3.30", optional = true }
futures-util = { version = "0.3.30", optional = true }
http = "1"
icondata = { version = "0.6.0" }
js-sys = "0.3.77"
jsonwebtoken = { version = "9.2.0", optional = true }
leptos = { version = "0.8.0", features = ["nightly"] }
leptos_axum = { version = "0.8.0", optional = true }
leptos_icons = { version = "0.6.1" }
leptos_meta = { version = "0.8.0" }
leptos_router = { version = "0.8.0", features = ["nightly"] }
log = "0.4"
oauth-axum = { version = "0.1.4", optional = true }
once_cell = "1.18.0"
postgrest = "1.0"
pulldown-cmark = "0.13"
regex = { version = "1.10.4", optional = true }
reqwest = { version = "0.12.8", features = ["json"], optional = true }
serde = { version = "1.0", features = ["derive"] }
serde-wasm-bindgen = "0.6.5"
serde_json = "1.0"
serde_urlencoded = { version = "0.7.1", optional = true }
thiserror = "1"
tokenizers = { version = "0.21.0", optional = true }
tokio = { version = "1.42", features = ["sync", "rt-multi-thread", "macros"], optional = true }
tokio-util = { version = "0.7.13", features = ["rt"], optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["fs", "trace"], optional = true }
tracing = { version = "0.1", optional = true }
url = { version = "2.5.4", optional = true }
urlencoding = "2.1.3"
uuid = { version = "1.11.0", features = ["v4", "js"] }
wasm-bindgen = "=0.2.100" 
wasm-bindgen-futures = "0.4.46"
web-sys = { version = "0.3.73", features = ["Storage", "Window", "Document", "CanvasRenderingContext2d", "TouchEvent", "TouchList", "DomRect", "DomTokenList", "Element", "NodeList", "Touch", "CustomEvent", "CustomEventInit"] }

[features]
hydrate = [
    "leptos/hydrate",
    "dep:console_error_panic_hook",
]
ssr = [
    "dep:async-openai",
    "dep:argon2",
    "dep:axum",
    "dep:axum-extra",
    "dep:base64",
    "dep:candle-core",
    "dep:candle-nn",
    "dep:cookie",
    "dep:dashmap",
    "dep:deadpool-diesel",
    "dep:diesel",
    "dep:diesel-async",
    "dep:futures",
    "dep:futures-util",
    "dep:jsonwebtoken",
    "dep:leptos_axum",
    "dep:oauth-axum",
    "dep:regex",
    "dep:reqwest",
    "dep:serde_urlencoded",
    "dep:tokenizers",
    "dep:tokio",
    "dep:tokio-util",
    "dep:tower",
    "dep:tower-http",
    "dep:tracing",
    "dep:url",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
]

[profile.release]
codegen-units = 1
lto = true
opt-level = 'z'

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]

bin-target = "l3chat"

# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "l3chat"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# tailwind
tailwind-input-file = "style/tailwind.css"
tailwind-config-file = "tailwind.config.js"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
